@use "sass:map";
@use '../abstracts' as _;

// this monstrosity loops over all the fonts in the fonts map
// which is dragged in from abstracts
@each $font in _.get-font(fonts) {
  @include _.generate-font-face(
    $font-family: map.get($font, 'font-family'),
    $font-file: #{_.get-font(path)}#{map.get($font, 'font-file')},
    $font-weight: unquote(map.get($font, 'font-weight')),
    $font-style: unquote(map.get($font, 'font-style'))
  );
  // this is to remind me of the available fonts in terminal
  // @debug '\A ================ \A New font added: \A #{map.values($font)} \A ================';
}

:root {
  font-kerning: normal;
  text-rendering: optimizeLegibility;
  font-variant: common-ligatures oldstyle-nums proportional-nums;
  font-feature-settings: 'kern', 'liga', 'clig', 'onum', 'pnum';
  text-underline-position: under;
  font-size: _.$base-font-size;
  font-size: calc(_.$base-font-size + 0.2vw);
  line-height: 1.275;
  box-sizing: border-box;
  font-family: 'font-b', Georgia, 'Times New Roman', Times, serif;
}

*, *:before, *:after {
  box-sizing: inherit;
}

%bodycopy {
  font-size: 1rem;
  font-feature-settings: 'onum' 1;
}

%displaycopy {
  font-family: 'font-a', "Franklin Gothic Medium", "Franklin Gothic", "ITC Franklin Gothic", Arial, sans-serif;
  letter-spacing: -0.027em;
}

.prose {

  a {

  }

  ol,
  ul,
  p {
    &:not([class]) {
      @extend %bodycopy;
    }
  }

  figure:not([class]) {
    margin: 0;
  }

  img:not([class]) {
    max-width: 100%;
  }

  ul:not([class]) {
    list-style-type: "–";
    padding: 0 0.5em;
    li {
      padding-left: .5em;
      margin-bottom: .75em;
    }
  }

  ol:not([class]) {
    li {
      margin-bottom: .5em;
      line-height: 1.225;
    }
  }

  h1,
  h2,
  h3,
  h4,
  h5 {
    &:not([class]) {
      @extend %displaycopy;
      a {
        color: _.get-colour('palette.grey.9');
        text-decoration: none;
      }
      margin: 1.25em 0 0.25em;
      + * {
        margin-top: 0 !important;
      }
    }
  }

  figure {
    &:not([class]) {
      border-radius: 0.15rem;
      overflow: hidden;
      img {
        height: auto;
      }
      margin: 0;
      & + figure {
        margin-top: 1em;
      }
    }
  }

  hr {
    height: 1px;
    background: transparent;
    overflow: hidden;
    border: 0;
    background: transparent url(/assets/images/diamond_divider.svg) no-repeat 50% 50%;
    height: 10px;
    margin-top: 2.25em;
    margin-bottom: 2.75em;
  }

}

.markdown-table-of-contents {
 > ul {
    > li {
      margin-bottom: 0.5em;
    }
    ul {
      li {
        font-size: 0.9em;
        &:first-child {
          margin-top: 0.35em;
        }
      }
    }
  }
}

.heading {
  @extend %displaycopy;
  &--toc {
    font-size: .85rem;
    margin: 0 0 -.5em 0;
  }
}

.heading-title {
  @extend %displaycopy;
  a {
    text-decoration: none;
    &:hover {
      text-decoration: underline;
    }
  }

  &--proximity  {
    margin-bottom: .15em;
    + * {
      margin-top: 0 !important;
    }
  }

  &--separated {
    border-bottom: 1px solid _.get-colour('border.default');
    padding-bottom: 0.15em;
  }

}

.prose--weeknotes {
  ul:not([class]) {
    padding: 0 1em;
    list-style-type: '– ';
    li {
      ul {
        list-style-type: '- ';
        margin-bottom: 1em;
      }
      li {
        margin: 0.5em 0 0;
        font-size: 0.925em;
      }
      p {
        margin: 0.75em 0;
      }
      margin: 1em 0;
    }
  }
  h2:not([class]) {
    margin: 1em 0 .5em;
  }
  h3:not([class]) {
    font-family: 'font-b';
    font-size: 1em;
    letter-spacing: 0;
  }
}

.c-annotation {
  display: block;
  font-size: 0.9em;
  text-transform: uppercase;
  font-family: sans-serif;
  color: _.get-colour('palette.grey.6');
  font-weight: bold;
}

.c-quote {
  padding: .5em 1.5em;
  border-left: 10px solid _.get-colour('palette.grey.9');
  margin: 1.5em 0;
}

.content-image {
  margin: 0;
  &--border {
    border: 1px solid _.get-colour('border.default');
  }
  &--spaced-b {
    margin-bottom: 1rem;
  }
  &--rounded {
    border-radius: 0.15em;
    overflow: hidden;
  }
}
